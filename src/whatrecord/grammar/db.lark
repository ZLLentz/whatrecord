start: database

NEWLINE     : "\n"
BACKSLASH   : "\\"
SINGLEQUOTE : "'"
DOUBLEQUOTE : "\""
COMMENT_CH  : "#"
COMMENT     : COMMENT_CH /[^\n\r]/*    // defined for lark
WHITESPACE  : /[ \t\r\n]/
ESCAPE      : BACKSLASH /./
STRINGCHAR  : /[^"\n\\]/
BAREWORD    : /[a-zA-Z0-9_\-+:.\[\]<>;]/

PUNCTUATION : /[:,\[\]{}]/
NORMALCHAR  : /[^"'\\\0-\x1f]/
BARECHAR    : /[a-zA-Z0-9_\-+.]/
ESCAPEDCHAR : BACKSLASH /[^ux1-9]/
HEXDIGIT    : /[0-9a-fA-F]/
LATINCHAR   : BACKSLASH "x" HEXDIGIT~2
UNICODECHAR : BACKSLASH "u" HEXDIGIT~4
JSONDQCHAR  : NORMALCHAR
            | SINGLEQUOTE
            | ESCAPEDCHAR
            | LATINCHAR
            | UNICODECHAR

JSONSQCHAR  : NORMALCHAR
            | DOUBLEQUOTE
            | ESCAPEDCHAR
            | LATINCHAR
            | UNICODECHAR

JSONSTR     : DOUBLEQUOTE JSONDQCHAR* DOUBLEQUOTE
            | SINGLEQUOTE JSONSQCHAR* SINGLEQUOTE

SIGN        : /[+-]/
INT         : SIGN? /[0-9]|[1-9][0-9]+/
FRAC        : "." /[0-9]+/
EXP         : "e"i SIGN? /[0-9]+/
jsonnum     : INT FRAC? EXP?
intexp      : INT "." EXP?
fracexp     : SIGN? FRAC EXP?
specialnum  : "NaN"             -> nan
            | "+"? "Infinity"   -> pos_infinity
            | "-" "Infinity"    -> neg_infinity

hexint      : SIGN? ("0x" | "0X") HEXDIGIT+

number      : jsonnum
            | intexp
            | fracexp
            | hexint
            | specialnum

TOKEN_INCLUDE     : "include"
TOKEN_PATH        : "path"
TOKEN_ADDPATH     : "addpath"
TOKEN_MENU        : "menu"
TOKEN_CHOICE      : "choice"
TOKEN_RECORDTYPE  : "recordtype"
TOKEN_FIELD       : "field"
TOKEN_DEVICE      : "device"
TOKEN_DRIVER      : "driver"
TOKEN_LINK        : "link"
TOKEN_BREAKTABLE  : "breaktable"
TOKEN_RECORD      : "record"
TOKEN_GRECORD     : "grecord"
TOKEN_ALIAS       : "alias"
TOKEN_INFO        : "info"
TOKEN_REGISTRAR   : "registrar"
TOKEN_FUNCTION    : "function"
TOKEN_VARIABLE    : "variable"

UNQUOTED_STRING_OR_NUMBER: BAREWORD+
QUOTED_STRING:  DOUBLEQUOTE (STRINGCHAR | ESCAPE )* DOUBLEQUOTE
FLEXIBLE_STRING: UNQUOTED_STRING_OR_NUMBER
               | QUOTED_STRING


TOKEN_CDEFS: "%" /.*/

JSON_NULL: "null"
JSON_TRUE: "true"
JSON_FALSE: "false"

database: _database_item_list*

_database_item_list: _database_item_list database_item
                   | database_item

database_item: include
             | path
             | addpath
             | TOKEN_MENU menu_head menu_body
             | TOKEN_RECORDTYPE recordtype_head recordtype_body
             | device
             | driver
             | link
             | registrar
             | function
             | variable
             | TOKEN_BREAKTABLE break_head break_body
             | TOKEN_RECORD record_head record_body
             | TOKEN_GRECORD grecord_head record_body
             | alias

include:    TOKEN_INCLUDE FLEXIBLE_STRING

path:   TOKEN_PATH FLEXIBLE_STRING

addpath:    TOKEN_ADDPATH FLEXIBLE_STRING

menu_head:  "(" FLEXIBLE_STRING ")"

menu_body:  "{" choice_list "}"

choice_list: choice_list choice
           | choice

choice: TOKEN_CHOICE "(" FLEXIBLE_STRING "," FLEXIBLE_STRING ")"
      | include

recordtype_head: "(" FLEXIBLE_STRING ")"

recordtype_body: "{" "}"
               | "{" recordtype_field_list "}"

recordtype_field_list:  recordtype_field_list recordtype_field
                     | recordtype_field

recordtype_field: TOKEN_FIELD recordtype_field_head recordtype_field_body
                | TOKEN_CDEFS
                | include

recordtype_field_head: "(" FLEXIBLE_STRING "," FLEXIBLE_STRING ")"

recordtype_field_body: "{" recordtype_field_item_list "}"

recordtype_field_item_list:  recordtype_field_item_list recordtype_field_item
                          | recordtype_field_item

recordtype_field_item:  FLEXIBLE_STRING "(" FLEXIBLE_STRING ")"
                     | TOKEN_MENU "(" FLEXIBLE_STRING ")"


device: TOKEN_DEVICE "(" FLEXIBLE_STRING "," FLEXIBLE_STRING "," FLEXIBLE_STRING "," FLEXIBLE_STRING ")"


driver: TOKEN_DRIVER "(" FLEXIBLE_STRING ")"

link: TOKEN_LINK "(" FLEXIBLE_STRING "," FLEXIBLE_STRING ")"

registrar: TOKEN_REGISTRAR "(" FLEXIBLE_STRING ")"

function: TOKEN_FUNCTION "(" FLEXIBLE_STRING ")"

variable: TOKEN_VARIABLE "(" FLEXIBLE_STRING ")"
        | TOKEN_VARIABLE "(" FLEXIBLE_STRING "," FLEXIBLE_STRING ")"

break_head: "(" FLEXIBLE_STRING ")"

break_body : "{" break_list "}"

break_list: break_list "," break_item
          | break_list break_item
          | break_item

break_item: FLEXIBLE_STRING

grecord_head: "(" FLEXIBLE_STRING "," FLEXIBLE_STRING ")"

record_head: "(" FLEXIBLE_STRING "," FLEXIBLE_STRING ")"

record_body:  // TODO: null record body is acceptable?
           | "{" "}"
           | "{" record_field* "}"

record_field: TOKEN_FIELD "(" FLEXIBLE_STRING "," json_value ")"
    | TOKEN_INFO "(" FLEXIBLE_STRING "," json_value ")"
    | TOKEN_ALIAS "(" FLEXIBLE_STRING ")"
    | include

alias: TOKEN_ALIAS "(" FLEXIBLE_STRING "," FLEXIBLE_STRING ")"

// TODO: context-sensitive json-handling not accurate :(

json_initial_comment: COMMENT /.*/
json_whitespace: WHITESPACE

json_object: "{" "}"
           | "{" json_members "}"

json_members: json_pair
            | json_pair ","
            | json_pair "," json_members

json_pair: JSON_KEY ":" json_value

JSON_KEY: JSONSTR
        | BARECHAR+

JSON_STRING: JSONSTR
           | BARECHAR+

json_array: "[" "]"
          | "[" json_elements "]"

json_elements: json_value
             | json_value ","
             | json_value "," json_elements

// TODO: Retain the trailing "," so link parser can distinguish a 1-element
// const list from a PV name (commas are illegal)

json_value: JSON_NULL
           | JSON_TRUE
           | JSON_FALSE
           | JSON_STRING
           | number
           | json_array
           | json_object

%import common.WS_INLINE
%import common.WS
%ignore WS_INLINE
%ignore WS

%ignore COMMENT
